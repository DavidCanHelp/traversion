version: '3.8'

services:
  # Main application
  app:
    build: .
    container_name: traversion-app
    ports:
      - "3335:3335"
    environment:
      - NODE_ENV=production
      - DB_TYPE=postgres
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=traversion
      - DB_USER=traversion
      - DB_PASSWORD=${DB_PASSWORD:-changeme}
      - JWT_SECRET=${JWT_SECRET:-change-this-in-production}
      - REDIS_ENABLED=true
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - TIMESCALE_ENABLED=true
      - TIMESCALE_HOST=timescale
      - TIMESCALE_PORT=5432
      - TIMESCALE_DB=traversion_metrics
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      timescale:
        condition: service_healthy
    volumes:
      - ./data:/app/.traversion
      - ./.git:/app/.git:ro
    restart: unless-stopped
    networks:
      - traversion-network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: traversion-postgres
    environment:
      - POSTGRES_DB=traversion
      - POSTGRES_USER=traversion
      - POSTGRES_PASSWORD=${DB_PASSWORD:-changeme}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U traversion"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - traversion-network

  # TimescaleDB for time-series data
  timescale:
    image: timescale/timescaledb:latest-pg15
    container_name: traversion-timescale
    environment:
      - POSTGRES_DB=traversion_metrics
      - POSTGRES_USER=traversion
      - POSTGRES_PASSWORD=${DB_PASSWORD:-changeme}
    volumes:
      - timescale-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U traversion"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - traversion-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: traversion-redis
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - traversion-network

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: traversion-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - traversion-network
    profiles:
      - production

volumes:
  postgres-data:
  timescale-data:
  redis-data:

networks:
  traversion-network:
    driver: bridge
